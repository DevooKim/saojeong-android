diff a/app/src/main/java/com/example/saojeong/fragment/ShopListFragment.java b/app/src/main/java/com/example/saojeong/fragment/ShopListFragment.java	(rejected hunks)
@@ -45,6 +50,9 @@
     private ShopOCAdapter shopClosedAdapter;
     List<ContactShopOC> contactShopOCs;
 
+    List<StoreDto> openedStore;
+    List<StoreDto> closedStore;
+
     private StoreService storeService;
 
     Spinner spinner_shop;
@@ -125,8 +126,8 @@
             public void onResponse(Call<TypeStoreDto> call, Response<TypeStoreDto> response) {
                 if (response.code() == 201) {
                     TypeStoreDto body = response.body();
-                    List<StoreDto> openedStore = body.getOpenStore();
-                    List<StoreDto> closedStore = body.getClosedStore();
+                    openedStore = body.getOpenStore();
+                    closedStore = body.getClosedStore();
 
                     contactShopOCs = ContactShopOC.createContactsList(openedStore);
                     shopOpenedAdapter = new ShopOCAdapter(Glide.with(getActivity()), contactShopOCs);
@@ -146,6 +147,42 @@
             }
         });
 
+
+        //순서 나열 Spinner
+        spinner_shop = (Spinner) rootView.findViewById(R.id.spinner_fruit);
+        item_shop = new String[]{"평점 높은 순", "평점 많은 순", "이름 순"};
+        ArrayAdapter<String> adapter_shopoc = new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_item, item_shop);
+        adapter_shopoc.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        spinner_shop.setAdapter(adapter_shopoc);
+        spinner_shop.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
+                if (openedStore != null && closedStore != null) {
+                    Log.d("BEFORE", openedStore.toString());
+                    switch (i) {
+                        case 0:
+                            Collections.sort(openedStore,
+                                    (a, b) -> b.getVoteGradeAverage().compareTo(a.getVoteGradeAverage()));
+                            break;
+                        case 1:
+                            Collections.sort(openedStore,
+                                    (a, b) -> b.getVoteGradeCount().compareTo(a.getVoteGradeCount()));
+                            break;
+                        case 2:
+                            Collections.sort(openedStore,
+                                    (a, b) -> a.getStoreName().compareTo(b.getStoreName()));
+                            break;
+                    }
+                    Log.d("AFTER", openedStore.toString());
+                }
+            }
+
+            @Override
+            public void onNothingSelected(AdapterView<?> adapterView) {
+
+            }
+        });
+
         return rootView;
     }
 
